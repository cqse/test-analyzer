<com.teamscale.core.migration.TeamscaleVersionContainer>
  <version class="com.teamscale.index.configuration.service.EAnalysisProfileVersion">ANALYSIS_PROFILE_VERSION_10</version>
  <payload class="org.conqat.engine.index.configuration.instance.AnalysisProfile">
    <options class="linked-hash-map">
      <entry>
        <string>Enable search</string>
        <string>true</string>
      </entry>
    </options>
    <name>TestAnalyzer</name>
    <languages class="linked-hash-set">
      <eu.cqse.check.framework.scanner.ELanguage>JAVA</eu.cqse.check.framework.scanner.ELanguage>
    </languages>
    <tools class="linked-hash-set">
      <org.conqat.engine.index.configuration.model.EAnalysisTool>FINDBUGS</org.conqat.engine.index.configuration.model.EAnalysisTool>
      <org.conqat.engine.index.configuration.model.EAnalysisTool>CUSTOM</org.conqat.engine.index.configuration.model.EAnalysisTool>
      <org.conqat.engine.index.configuration.model.EAnalysisTool>JACOCO</org.conqat.engine.index.configuration.model.EAnalysisTool>
    </tools>
    <qualityIndicators>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Architecture</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Architecture violation</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Unmatched Types</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Include 3rd-party dependencies</string>
                <string>false</string>
              </entry>
            </options>
            <name>Architecture Conformance</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Code Anomalies</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Avoid unused private methods</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Avoid unused private fields (Java)</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Unused code</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Primitive value is boxed and then immediately unboxed</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Primitive value is boxed then unboxed to perform primitive coercion</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Primitive value is unboxed and coerced for ternary operator</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Boxed value is unboxed and then immediately reboxed</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>The equals and hashCode methods of URL are blocking</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Maps and sets of URLs can be performance hogs</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Boxing a primitive to compare</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Boxing/unboxing to parse a primitive</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method allocates a boxed primitive just to call toString</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes inefficient floating-point Number constructor; use static valueOf instead</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Explicit garbage collection; extremely dubious except in benchmarking code</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method allocates an object, only to get the class object</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Use the nextInt method of Random rather than nextDouble to generate a random integer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes inefficient Number constructor; use static valueOf instead</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes inefficient new String(String) constructor</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes toString() method on a String</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes inefficient new String() constructor</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Huge string constants is duplicated across multiple class files</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>NodeList.getLength() called in a loop</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method calls Pattern.compile in a loop</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method compiles the regular expression in a loop</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method calls prepareStatement in a loop</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Inefficient use of String.indexOf(String)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Inefficient use of String.lastIndexOf(String)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method accesses a private member variable of owning class</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method uses toArray() with zero-length array argument</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method concatenates strings using + in a loop</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Should be a static inner class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Could be refactored into a named static inner class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Could be refactored into a static inner class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unread field: should this field be static?</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method calls static Math class method on a constant value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Private method is never called</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unread field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unused field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Inefficient use of keySet iterator instead of entrySet iterator</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Performance (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Classloaders should only be created inside doPrivileged block</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method invoked that should be only be invoked inside a doPrivileged block</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>May expose internal representation by returning reference to mutable object</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>May expose internal representation by incorporating reference to mutable object</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>May expose internal static state by storing a mutable object into a static field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer should be protected, not public</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field isn&apos;t final and can&apos;t be protected from malicious code</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Public static method may expose internal representation by returning array</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field should be both final and package protected</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field is a mutable array</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field is a mutable collection</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field is a mutable collection which should be package protected</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field is a mutable Hashtable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field should be moved out of an interface and made package protected</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field should be package protected</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field isn&apos;t final but should be</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field isn&apos;t final but should be refactored to be so</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Malicious code vulnerability (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Test class name ending</string>
                <string>Test</string>
              </entry>
              <entry>
                <string>Unit test classes should be located in the same package as the class under test</string>
                <string>Red</string>
              </entry>
            </options>
            <name>Architecture</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>externals-2-type-2</string>
                <string>Red</string>
              </entry>
            </options>
            <name>Group 2</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>externals-1-type-1</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Group 1</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Questionable cast to abstract collection</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Questionable cast to concrete collection</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unchecked/unconfirmed cast</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unchecked/unconfirmed cast of return value from method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>instanceof will always return true</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Covariant array assignment to a field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Covariant array assignment to a local variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Covariant array is returned from the method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Test for circular dependencies among classes</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class is final but declares protected field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method uses the same code for two branches</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method uses the same code for two switch clauses</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Dead store to local variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless assignment in return statement</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Dead store of null to local variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Dead store to local variable that shadows field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Code contains a hard coded reference to an absolute pathname</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Non serializable object written to ObjectOutput</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Thread passed where Runnable expected</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to unsupported method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Invocation of substring(0), which returns the original value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class doesn&apos;t override equals in superclass</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Unusual equals method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Test for floating point equality</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Potentially ambiguous invocation of either an inherited or outer method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Integral division result cast to double or float</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Result of integer multiplication cast to long</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unsigned right shift cast to short/byte</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Initialization circularity</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Computation of average could overflow</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Check for oddness that won&apos;t work for negative numbers</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Integer remainder modulo 1</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Vacuous bit mask operation on integer value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Vacuous comparison of integer value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class extends Servlet class and uses instance variables</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class extends Struts Action class and uses instance variables</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Dereference of the result of readLine() without nullcheck</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Immediate dereference of the result of readLine()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Load of known null value</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method tightens nullness annotation on parameter</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method relaxes nullness annotation on return value</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possible null pointer dereference due to return value of called method</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Possible null pointer dereference on branch that might be infeasible</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Parameter must be non-null but is marked as nullable</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Read of unwritten public or protected field</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Potentially dangerous use of non-short-circuit logic</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Questionable use of non-short-circuit logic</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class exposes synchronization and semaphores in its public interface</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Consider returning a zero length array rather than null</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Complicated, subtle or wrong increment in for-loop</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Redundant comparison of non-null value to null</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Redundant comparison of two null values</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Redundant nullcheck of value known to be non-null</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Redundant nullcheck of value known to be null</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Exception is caught when Exception is not thrown</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class implements same interface as superclass</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method checks to see if result of String.indexOf is positive</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method discards result of readLine after checking if it is non-null</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Remainder of hashCode could be negative</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Remainder of 32-bit signed random integer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method ignores return value, is this OK?</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Return value of method without side effect is ignored</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Double assignment of field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Double assignment of local variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Self assignment of local variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Private readResolve method not inherited by subclasses</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Transient field of class that isn&apos;t Serializable.</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Switch statement found where one case falls through to the next case</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Switch statement found where default case is missing</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Write to static field from instance method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Value required to have type qualifier, but marked as unknown</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Value required to not have type qualifier, but marked as unknown</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Useless control flow</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless control flow to next line</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Condition has no effect</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Condition has no effect due to the variable type</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless object created</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless object created on stack</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless non-empty void method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unread public/protected field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Abstract Method is already defined in implemented interface</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method superfluously delegates to parent class method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unused public or protected field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field not initialized in constructor but dereferenced without null check</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unwritten public or protected field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Non-Boolean argument formatted using %b format specifier</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method directly allocates a specific implementation of xml interfaces</string>
                <string>Off</string>
              </entry>
            </options>
            <name>Dodgy code (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Commented-out code</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Empty blocks</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Empty blocks: allow empty methods</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Missing code</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>General checks (built-in)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Hardcoded constant database password</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Empty database password</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>HTTP cookie formed from untrusted input</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>HTTP Response splitting vulnerability</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Absolute path traversal in servlet</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Relative path traversal in servlet</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Nonconstant string passed to execute or addBatch method on an SQL statement</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>A prepared statement is generated from a nonconstant String</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>JSP reflected cross site scripting vulnerability</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Servlet reflected cross site scripting vulnerability in error page</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Servlet reflected cross site scripting vulnerability</string>
                <string>Red</string>
              </entry>
            </options>
            <name>Security (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Consider using Locale parameterized version of invoked method</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Reliance on default encoding</string>
                <string>Off</string>
              </entry>
            </options>
            <name>Internationalization (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Bad Applet Constructor relies on uninitialized AppletStub</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Impossible cast</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Impossible cast involving primitive array</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Impossible downcast</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Impossible downcast of toArray() result</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>instanceof will always return false</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>A known null value is checked to see if it is an instance of a type</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bitwise add of signed byte value</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Incompatible bit masks</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Check to see if ((...) &amp; 0) == 0</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Bitwise OR of signed byte value</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Check for sign of bitwise operation</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class overrides a method implemented in super class Adapter wrongly</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possible bad parsing of shift operation</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possibly incompatible element is stored in covariant array</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Useless increment in return statement</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Dead store of class literal</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Overwritten increment</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Can&apos;t use reflection to check for presence of annotation without runtime retention</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Reversed method arguments</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad constant value for month</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>BigDecimal constructed from double that isn&apos;t represented precisely</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>hasNext method invokes next</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Collections should not contain themselves</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>D&apos;oh! A nonsensical method invocation</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Futile attempt to change max pool size of ScheduledThreadPoolExecutor</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Invocation of hashCode on an array</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Invocation of toString on an unnamed array</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Double.longBitsToDouble invoked on an int</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Creation of ScheduledThreadPoolExecutor with zero core threads</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Useless/vacuous call to EasyMock method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Vacuous call to collections</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Incorrect combination of Math.max and Math.min</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>equals() used to compare array and nonarray</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Invocation of equals() on an array, which is equivalent to ==</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>equals(...) used to compare incompatible arrays</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to equals(null)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to equals() comparing unrelated class and interface</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to equals() comparing different interface types</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to equals() comparing different types</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Using pointer equality to compare different types</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>equals method always returns false</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>equals method always returns true</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>equals method compares class names rather than class objects</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Covariant equals() method defined for enum</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>equals() method defined that doesn&apos;t override equals(Object)</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>equals() method defined that doesn&apos;t override Object.equals(Object)</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>equals method overrides equals in superclass and may not be symmetric</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Covariant equals() method defined, Object.equals(Object) inherited</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Missing expected or desired warning from FindBugs</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Unexpected/undesired warning from FindBugs</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Doomed test for equality to NaN</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method performs math using floating point precision</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>No relationship between generic parameter and method argument</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Signature declares use of unhashable class in hashed construct</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Use of class without a hashCode() method in a hashed data structure</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>32 bit int shifted by an amount not in the range -31..31</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>int value converted to long and used as absolute time</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Integral value cast to double and then passed to Math.ceil</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>int value cast to float and then passed to Math.round</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>JUnit assertion in run method will not be noticed by JUnit</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>TestCase declares a bad suite method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>TestCase has no tests</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>TestCase defines setUp that doesn&apos;t call super.setUp()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>TestCase implements a non-static suite method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>TestCase defines tearDown that doesn&apos;t call super.tearDown()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>A collection is added to itself</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>An apparent infinite loop</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>An apparent infinite recursive loop</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Integer multiply of result of integer remainder</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad comparison of int value with long constant</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad comparison of nonnegative value with negative constant or zero</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad comparison of signed byte</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Doomed attempt to append to an object output stream</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>A parameter is dead upon entry to a method but overwritten</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Class defines field that masks a superclass field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method defines a variable that obscures a field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines equal(Object); should it be equals(Object)?</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines hashcode(); should it be hashCode()?</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines tostring(); should it be toString()?</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Apparent method/constructor confusion</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Very confusing method names</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method doesn&apos;t override method in superclass due to wrong package for parameter</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Null pointer dereference</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Null pointer dereference in method on exception path</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method does not check for null argument</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>close() invoked on a value that is always null</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Null value is guaranteed to be dereferenced</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Value is null and guaranteed to be dereferenced on exception path</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Non-null field is not initialized</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method call passes null to a non-null parameter</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method may return null, but is declared @Nonnull</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possible null pointer dereference</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Possible null pointer dereference in method on exception path</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method call passes null for non-null parameter</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Non-virtual method call passes null for non-null parameter</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method with Optional return type returns explicit null</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Store of null value into field annotated @Nonnull</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Read of unwritten field</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method may fail to clean up stream or resource</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method may fail to clean up stream or resource on checked exception</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method assigns boolean literal in boolean expression</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Array index is out of bounds</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Array length is out of bounds</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Array offset is out of bounds</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>String index is out of bounds</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Redundant comparison to null of previously checked value</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Nullcheck of value previously dereferenced</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Suspicious reference comparison</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Invalid syntax for regular expression</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>File.separator used for regular expression</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>&quot;.&quot; or &quot;|&quot; used for regular expression</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Random value from 0 to 1 is coerced to the integer 0</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad attempt to compute absolute value of signed 32-bit hashcode</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad attempt to compute absolute value of signed random integer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Code checks for specific values returned by compareTo</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Exception created and dropped rather than thrown</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method ignores return value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Repeated conditional tests</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Self assignment of field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Self comparison of field with itself</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Nonsensical self computation involving a field (e.g., x &amp; x)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Self assignment of local rather than assignment to field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Self comparison of value with itself</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Nonsensical self computation involving a variable (e.g., x &amp; x)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method must be private in order for serialization to work</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>The readResolve method must not be declared as a static method.</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Dead store due to switch statement fall through</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Dead store due to switch statement fall through to throw</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Deadly embrace of non-static inner class and thread local</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Unnecessary type check done using instanceof operator</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method attempts to access a prepared statement parameter with index 0</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method attempts to access a result set field with index 0</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unneeded use of currentThread() call, to call interrupted()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Static Thread.interrupted() method invoked on thread instance</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Comparing values with incompatible type qualifiers</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Value that might not carry a type qualifier is always used in a way requires that type qualifier</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Value annotated as never carrying a type qualifier used where value carrying that qualifier is required</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Value without a type qualifier used where a value is required to have that qualifier</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Uncallable method defined in anonymous class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Uninitialized read of field in constructor</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Uninitialized read of field method called from constructor of superclass</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field only ever set to null</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unwritten field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Number of format-string arguments does not correspond to number of placeholders</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Format string placeholder incompatible with passed argument</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>The type of a supplied argument doesn&apos;t match format specifier</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Array formatted in useless way using format string</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>MessageFormat supplied where printf style format expected</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>More arguments are passed than are actually used in the format string</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Illegal format string</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Format string references missing argument</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>No previous argument for format string</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Primitive array passed to function expecting a variable number of object arguments</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class makes reference to unresolvable class or method</string>
                <string>Off</string>
              </entry>
            </options>
            <name>Correctness (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Sequence of calls to concurrent abstraction may not be atomic</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possible double check of field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Possible exposure of partially initialized object</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on Boolean</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on boxed primitive</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on interned String</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on boxed primitive values</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Monitor wait() called on Condition</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>A thread was created using the default empty run method</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Empty synchronized block</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Inconsistent synchronization</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Field not guarded against concurrent access</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization performed on Lock</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization performed on util.concurrent instance</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Using monitor style wait methods on util.concurrent abstraction</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Incorrect lazy initialization of instance field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Incorrect lazy initialization of static field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Incorrect lazy initialization and update of static field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on field in futile attempt to guard that field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method synchronizes on an updated field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Mutable servlet field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Mismatched notify()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Mismatched wait()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Naked notify</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Using notify() rather than notifyAll()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronize and null check on the same field.</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class&apos;s readObject() method is synchronized</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Invokes run on a thread (did you mean to start it instead?)</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Return value of putIfAbsent ignored, value passed to putIfAbsent reused</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Constructor invokes Thread.start()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method spins on field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Call to static Calendar</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Call to static DateFormat</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Static Calendar field</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Static DateFormat</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method calls Thread.sleep() with a lock held</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Notify with two locks held</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Wait with two locks held</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Unsynchronized get method, synchronized set method</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method does not release lock on all paths</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method does not release lock on all exception paths</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Unconditional wait</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>An increment to a volatile field isn&apos;t atomic</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>A volatile reference to an array doesn&apos;t treat the array elements as volatile</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Condition.await() not in loop</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Wait not in loop</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Synchronization on getClass rather than class literal</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class&apos;s writeObject() method is synchronized but nothing else is</string>
                <string>Off</string>
              </entry>
            </options>
            <name>Multithreaded correctness (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Public class attribute</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Annotation filter for public fields</string>
                <string>@Rule,@Mock,@Inject,@AOptionFieldDescription,@AConQATFieldParameter</string>
              </entry>
              <entry>
                <string>Multiple top-level classes</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>hashCode() and equals()</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Java checks (built-in)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Same Package Import</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Properly initialize static variable</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method must not be named like constructor</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Don&apos;t throw Throwable, Error or RuntimeException</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Maximum case block length</string>
                <string>5</string>
              </entry>
              <entry>
                <string>Case Blocks Length</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Maximum number of imports</string>
                <string>50</string>
              </entry>
              <entry>
                <string>Too Many Imports</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Import from java.lang</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>finalize() may not be overwritten</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>No star imports</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unwanted constructor names</string>
                <string>Boolean,Byte,Short,Integer,Long,Float,Double,String</string>
              </entry>
              <entry>
                <string>Unwanted constructor calls</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Suspicious methods</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Field could be final (Java)</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unused imports</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Private methods must not be final</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Maximum number of parameters</string>
                <string>8</string>
              </entry>
              <entry>
                <string>Number of Method Parameters</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Maximum name length</string>
                <string>30</string>
              </entry>
              <entry>
                <string>Maximum type name length</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Switch/case without default</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Bad Assignments</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Multiple Assignments</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Maximum number of constructors</string>
                <string>5</string>
              </entry>
              <entry>
                <string>Too Many Constructors</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Allowed package prefixes</string>
                <string></string>
              </entry>
              <entry>
                <string>Package Name Mismatch</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Do not compare this and null</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unwanted methods</string>
                <string>System.exit,System.gc,System.out.println,System.err.println</string>
              </entry>
              <entry>
                <string>Unwanted method calls</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Inner Type Visiblity</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Maximum number of methods</string>
                <string>32</string>
              </entry>
              <entry>
                <string>Too Many Methods</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Bad practice</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Creates an empty jar file entry</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Creates an empty zip file entry</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Equals method should not assume anything about the type of its argument</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Rough value of known constant found</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class implements Cloneable but does not define or use clone method</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>clone method does not call super.clone()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class defines clone() but doesn&apos;t implement Cloneable</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Abstract class defines covariant compareTo() method</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>compareTo()/compare() incorrectly handles float or double value</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>compareTo()/compare() returns Integer.MIN_VALUE</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Covariant compareTo() method defined</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method might drop exception</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method might ignore exception</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Adding elements of an entry set may fail due to reuse of Entry objects</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Random object created and used only once</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Don&apos;t use removeAll to clear a collection</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method invokes System.exit(...)</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method invokes dangerous method runFinalizersOnExit</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Abstract class defines covariant equals() method</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Equals checks for incompatible operand</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines compareTo(...) and uses Object.equals()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>equals method fails for subtypes</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Covariant equals() method defined</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Comparison of String parameter using == or !=</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Comparison of String objects using == or !=</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Empty finalizer should be deleted</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Explicit invocation of finalizer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer nulls fields</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer only nulls fields</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer does not call superclass finalizer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer nullifies superclass finalizer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Finalizer does nothing but call superclass finalizer</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Unchecked type in generic call</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class defines equals() but not hashCode()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines equals() and uses Object.hashCode()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines hashCode() but not equals()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class defines hashCode() and uses Object.equals()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Class inherits equals() and uses Object.hashCode()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Superclass uses subclass during initialization</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Dubious catching of IllegalMonitorStateException</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Needless instantiation of class that only supplies static methods</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Iterator next() method can&apos;t throw NoSuchElementException</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Store of non serializable object into HttpSession</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Fields of immutable classes should be final</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Public enum method unconditionally sets its field</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Enum field is public and mutable</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class names should start with an upper case letter</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class is not derived from an Exception, even though it is named as such</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Confusing method names</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Field names should start with a lower case letter</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Use of identifier that is a keyword in later versions of Java</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method names should start with a lower case letter</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class names shouldn&apos;t shadow simple name of implemented interface</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class names shouldn&apos;t shadow simple name of superclass</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Very confusing method names (but perhaps intentional)</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method with Boolean return type returns explicit null</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Clone method may return null</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>equals() method does not check for null argument</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>toString method may return null</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method may fail to close database resource</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method may fail to close database resource on exception</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method may fail to close stream</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Method may fail to close stream on exception</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Don&apos;t reuse entry objects in iterators</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Suspicious reference comparison to constant</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Suspicious reference comparison of Boolean values</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method ignores results of InputStream.read()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Negating the result of compareTo()/compare()</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Method ignores exceptional return value</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Non-transient non-serializable instance field in serializable class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Non-serializable class has a serializable inner class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Non-serializable value stored into instance field of a serializable class</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Comparator doesn&apos;t implement Serializable</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Serializable inner class</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>serialVersionUID isn&apos;t final</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>serialVersionUID isn&apos;t long</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>serialVersionUID isn&apos;t static</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class is Serializable, but doesn&apos;t define serialVersionUID</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class is Serializable but its superclass doesn&apos;t define a void constructor</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Class is Externalizable but doesn&apos;t define a void constructor</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>The readResolve method must be declared with a return type of Object.</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Transient field that isn&apos;t set by deserialization.</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Static initializer creates instance before all static final fields assigned</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Method ignores results of InputStream.skip()</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Certain swing methods needs to be invoked in Swing thread</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Usage of GetResource may be unsafe if class is extended</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Format string should use %n rather than \n</string>
                <string>Off</string>
              </entry>
            </options>
            <name>Bad practice (Findbugs)</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Code Duplication</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Minimal clone length</string>
                <string>8</string>
              </entry>
              <entry>
                <string>Clone instance limit</string>
                <string>50</string>
              </entry>
              <entry>
                <string>Allow gaps</string>
                <string>false</string>
              </entry>
              <entry>
                <string>Clone Coverage</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Clones</string>
                <string>Red</string>
              </entry>
              <entry>
                <string>Alert inconsistent changes</string>
                <string>true</string>
              </entry>
            </options>
            <name>Cloning</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Documentation</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Task tags</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Task tag pattern</string>
                <string></string>
              </entry>
            </options>
            <name>Task tags</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Formatting</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Non-ASCII characters</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Long lines</string>
                <string>Off</string>
              </entry>
              <entry>
                <string>Long lines: maximal length</string>
                <string>120</string>
              </entry>
              <entry>
                <string>Long lines: ignore trailing space</string>
                <string>true</string>
              </entry>
            </options>
            <name>Text formatting</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Multiple statements in same line</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Multiple declarations in same statement</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Missing braces for block statements</string>
                <string>Yellow</string>
              </entry>
            </options>
            <name>Code formatting</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Naming</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Java naming conventions</string>
                <string>Yellow</string>
              </entry>
              <entry>
                <string>Regex for Packages</string>
                <string>[a-z][a-z_0-9.]*</string>
              </entry>
              <entry>
                <string>Regex for classes</string>
                <string>[A-Z][a-zA-Z0-9]*</string>
              </entry>
              <entry>
                <string>Regex for methods</string>
                <string>[a-z][a-zA-Z0-9]*</string>
              </entry>
              <entry>
                <string>Regex for method parameters</string>
                <string>[a-z][a-zA-Z0-9]*</string>
              </entry>
              <entry>
                <string>Regex for attributes</string>
                <string>(m_|s_)[a-z][a-zA-Z0-9]*</string>
              </entry>
              <entry>
                <string>Regex for local variables</string>
                <string>[a-z][a-zA-Z0-9]*</string>
              </entry>
              <entry>
                <string>Regex for constants</string>
                <string>[A-Z][_A-Z0-9]*</string>
              </entry>
            </options>
            <name>Java naming conventions</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Structure</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>File Size Assessment</string>
                <string>true</string>
              </entry>
              <entry>
                <string>File Size Assessment is SLOC-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Long File</string>
                <string>Auto</string>
              </entry>
              <entry>
                <string>Thresholds</string>
                <string>{&quot;yellowThreshold&quot;:&quot;200&quot;,&quot;redThreshold&quot;:&quot;300&quot;}</string>
              </entry>
              <entry>
                <string>SLOC-Based</string>
                <string>true</string>
              </entry>
            </options>
            <name>File Size</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Method Length</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Method Length Assessment</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Method Length Assessment is Method-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Method Length Assessment is SLOC-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Long Method</string>
                <string>Auto</string>
              </entry>
              <entry>
                <string>Method Length Thresholds</string>
                <string>{&quot;yellowThreshold&quot;:&quot;24&quot;,&quot;redThreshold&quot;:&quot;35&quot;}</string>
              </entry>
              <entry>
                <string>SLOC-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Statements-Based</string>
                <string>false</string>
              </entry>
            </options>
            <name>Method Length</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Nesting Depth</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Nesting Depth Assessment</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Nesting Depth Assessment is Method-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Nesting Depth Assessment is SLOC-Based</string>
                <string>true</string>
              </entry>
              <entry>
                <string>Deep Nesting</string>
                <string>Auto</string>
              </entry>
              <entry>
                <string>Nesting Depth Thresholds</string>
                <string>{&quot;yellowThreshold&quot;:&quot;3&quot;,&quot;redThreshold&quot;:&quot;5&quot;}</string>
              </entry>
            </options>
            <name>Nesting Depth</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
      <org.conqat.engine.index.configuration.instance.QualityIndicator>
        <options class="linked-hash-map">
          <entry>
            <string>Number of Findings</string>
            <string>false</string>
          </entry>
          <entry>
            <string>Findings Density</string>
            <string>false</string>
          </entry>
        </options>
        <name>Testing</name>
        <groups>
          <org.conqat.engine.index.configuration.instance.AnalysisGroup>
            <options class="linked-hash-map">
              <entry>
                <string>Test Coverage</string>
                <string>true</string>
              </entry>
            </options>
            <name>Test Coverage</name>
          </org.conqat.engine.index.configuration.instance.AnalysisGroup>
        </groups>
      </org.conqat.engine.index.configuration.instance.QualityIndicator>
    </qualityIndicators>
  </payload>
</com.teamscale.core.migration.TeamscaleVersionContainer>